/*
 * Â© 2024 AO Kaspersky Lab
 * Licensed under the MIT License
 */

/* Description of a solution security policy. */

/* Assign the execute interface. */
execute: kl.core.Execute

/* Include the base.psl file containing a formal
 * description of the Base security model. */
use nk.base._

/* Include EDL files. */
use EDL Einit
use EDL kl.core.Core

/* EDL descriptions of WebServer and TokenService. */
use EDL jwt_example.WebServer
use EDL jwt_example.TokenService
@INIT_EXTERNAL_ENTITIES@

/* Allows the KasperskyOS kernel to start itself and the Einit class process. */
execute src = kl.core.Core
{
    match dst = kl.core.Core             { grant () }
    match dst = Einit                    { grant () }
}

/* An Einit class process is allowed to start a process of the
 * jwt_example.WebServer and jwt_example.TokenService classes. */
execute src = Einit
{
    match dst = jwt_example.WebServer    { grant () }
    match dst = jwt_example.TokenService { grant () }
}

/* A client of the Einit class is allowed to query the KasperskyOS kernel. */
request src = Einit
{
    match dst = kl.core.Core             { grant () }
}

/* A client of the kl.bc.BlobContainer class is allowed to query a server
 * of the kl.core.Core and kl.VfsRamFs classes. */
request src = kl.bc.BlobContainer
{
    match dst = kl.core.Core             { grant () }
    match dst = kl.VfsRamFs              { grant () }
}

/* Any client in the solution is allowed to query
 * a server of the kl.bc.BlobContainer class. */
request dst = kl.bc.BlobContainer        { grant () }

/* A client of the kl.TlsEntity class is allowed to query a server
 * of the kl.core.Core, kl.VfsRamFs, and kl.VfsNet classes. */
request src = kl.TlsEntity
{
    match dst = kl.core.Core             { grant () }
    match dst = kl.VfsRamFs              { grant () }
    match dst = kl.VfsNet                { grant () }
}

/* A client of the kl.rump.Dhcpcd class is allowed to query a server
 * of the kl.core.Core, kl.VfsRamFs, and kl.VfsNet classes. */
request src = kl.rump.Dhcpcd
{
    match dst = kl.core.Core             { grant () }
    match dst = kl.VfsRamFs              { grant () }
    match dst = kl.VfsNet                { grant () }
}

/* A client of the jwt_example.WebServer class is allowed to query a server
 * of the kl.core.Core, kl.VfsRamFs, kl.VfsNet, kl.TlsEntity,
 * and jwt_example.TokenService classes. */
request src = jwt_example.WebServer
{
    match dst = kl.core.Core             { grant () }
    match dst = kl.VfsRamFs              { grant () }
    match dst = kl.VfsNet                { grant () }
    match dst = kl.TlsEntity             { grant () }
    match dst = jwt_example.TokenService { grant () }
}

/* A client of the jwt_example.TokenService class is allowed to query a server
 * of the kl.core.Core, kl.VfsRamFs, kl.VfsNet, and kl.TlsEntity classes. */
request src = jwt_example.TokenService
{
    match dst = kl.core.Core             { grant () }
    match dst = kl.VfsRamFs              { grant () }
    match dst = kl.VfsNet                { grant () }
    match dst = kl.TlsEntity             { grant () }
}

/* Any server and the KasperskyOS kernel are allowed to respond to
 * queries of any client. */
response                                 { grant () }

/* Any server and the KasperskyOS kernel are allowed to notify
 * any client regarding errors that occur when the client queries
 * the server or the KasperskyOS kernel by calling any method. */
error                                    { grant () }
